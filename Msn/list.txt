:: offers additional list capabilities;
:: author : Mason Marker;
:: date   : 03/11/2022;

:: prerequisite variables;
l lreturn;
l lparam1;
l lparam2;
i iparam1 = 0;
i iparam2 = 0;
i iparam3 = 0;
d dparam1 = 0;
d dparam2 = 0;
d dparam3 = 0;

s l_lclear_def = clears a list of all elements;
s l_lclear_params = @lparam1;
f clear! l_lclear_def l_lclear_params;
clear! = i l_lclear_length = -1;
clear! = lparam1 length -> l_lclear_length;
clear! = lparam1 removeat 0 [0:l_lclear_length];
end clear!;

s l_rangeof_def = creates a range of values;
s l_rangeof_params = @iparam1 @iparam2 -> @lreturn;
f rangeof l_rangeof_def l_rangeof_params;
rangeof = l lreturn;
rangeof = i l_rangeof_index = iparam1;
rangeof = f l_rangeof_loop;
rangeof = l_rangeof_loop = lreturn add l_rangeof_index;
rangeof = l_rangeof_loop = l_rangeof_index += 1;
rangeof = end l_rangeof_loop;
rangeof = l_rangeof_loop [iparam1:iparam2];
end rangeof;

s l_lcat_def = concatinates two lists;
s l_lcat_params = @lparam1 @lparam2 -> @lreturn;
f lcat l_lcat_def l_lcat_params;
lcat = l lreturn;
lcat = i l_lcat_index = 0;
lcat = f l_lcat_loop;
lcat = l_lcat_loop = o l_lcat_current = &;
lcat = l_lcat_loop = lparam1 getat l_lcat_index -> l_lcat_current;
lcat = l_lcat_loop = lreturn add l_lcat_current;
lcat = l_lcat_loop = l_lcat_index += 1;
lcat = end l_lcat_loop;
lcat = i l_lcat_length = -1;
lcat = lparam1 length -> l_lcat_length;
lcat = l_lcat_loop [0:l_lcat_length];
lcat = l_lcat_index = 0;
lcat = f l_lcat_loop2;
lcat = l_lcat_loop2 = o l_lcat_current = &;
lcat = l_lcat_loop2 = lparam2 getat l_lcat_index -> l_lcat_current;
lcat = l_lcat_loop2 = lreturn add l_lcat_current;
lcat = l_lcat_loop2 = l_lcat_index += 1;
lcat = end l_lcat_loop2;
lcat = l_lcat_length = -1;
lcat = lparam2 length -> l_lcat_length;
lcat = l_lcat_loop2 [0:l_lcat_length];
end lcat;

s sum_def = gets the sum of a list;
s sum_params = @lparam1 -> @ireturn @dreturn;
f sum sum_def sum_params;
sum = i l_sum_index = 0;
sum = d l_sum_sum = 0;
sum = i s_sum_length = -1;
sum = lparam1 length -> s_sum_length;
sum = f s_sum_loop;
sum = s_sum_loop = d s_sum_current = 0;
sum = s_sum_loop = lparam1 getat l_sum_index -> s_sum_current;
sum = s_sum_loop = l_sum_sum += s_sum_current;
sum = s_sum_loop = l_sum_index += 1;
sum = end s_sum_loop;
sum = s_sum_loop [0:s_sum_length];
sum = dreturn = l_sum_sum;
sum = ireturn = l_sum_sum;
end sum;



