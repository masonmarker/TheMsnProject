:: boolean class --- uses 0 for false and 1 for true;
:: author : Mason Marker;
:: date   : 03/11/2022;

s sreturn = &;
i ireturn = 0;
i iparam1 = 0;
i iparam2 = 0;
i iparam3 = 0;
i iparam4 = 0;
o oparam1 = &;
o oparam2 = &;
i true = 1;
i false = 0;

s b_isbool_def = determines if a number is a boolean value; 
s b_isbool_params = @iparam1 -> @ireturn;
f isbool b_isbool_def b_isbool_params;
isbool = ireturn = 0;
isbool = {iparam1==true} ireturn = 1;
isbool = {iparam1==false} ireturn = 1;
end isbool;

s b_booltostring_def = converts a bool to its string representation;
s b_booltostring_params = @iparam1 -> @sreturn;
f booltostring b_booltostring_def b_booltostring_params;
booltostring = isbool with iparam1;
booltostring = {iparam1==false} sreturn = fals;
booltostring = {iparam1==false} sreturn ++ e;
booltostring = {iparam1==true} sreturn = tru;
booltostring = {iparam1==true} sreturn ++ e;
end booltostring;

s b_and2_def = ands two bools;
s b_and2_params = @iparam1 @iparam2 -> @ireturn;
f and2 b_and2_def b_and2_params;
and2 = i b_and2_ph = -1;
and2 = ireturn = 0;
and2 = {iparam1==true} b_and2_ph = true;
and2 = i b_and_isfalse = false;
and2 = {iparam2==false} b_and_isfalse = true;
and2 = {iparam2==b_and2_ph} ireturn = true;
end and2;

s b_and3_def = ands three bools;
s b_and3_params = @iparam1 @iparam2 @iparam3 -> @ireturn;
f and3 b_and3_def b_and3_params;
and3 = and2 with iparam1 iparam2;
and3 = and2 with ireturn iparam3;
end and3;

s b_and4_def = ands four bools;
s b_and4_params = @iparam1 @iparam2 @iparam3 @iparam4 -> @ireturn;
f and4 b_and4_def b_and4_params;
and4 = and3 with iparam1 iparam2 iparam3;
and4 = and2 with ireturn iparam4;
end and4;

s b_or2_def = ors two bools;
s b_or2_params = @iparam1 @iparam2 -> @ireturn;
f or2 b_or2_def b_or2_params;
or2 = ireturn = false;
or2 = {iparam1==true} ireturn = true;
or2 = {iparam2==true} ireturn = true;
end or2;

s b_or3_def = ors three bools;
s b_or3_params = @iparam1 @iparam2 @iparam3 -> @ireturn;
f or3 b_or3_def b_or3_params;
f or3;
or3 = or2 with iparam1 iparam2;
or3 = or2 with ireturn iparam3;
end or3;

s b_or4_def = ors 4 bools;
s b_or4_params = @iparam1 @iparam2 @iparam3 @iparam4 -> @ireturn;
f or4 b_or4_def b_or4_params;
or4 = or3 with iparam1 iparam2 iparam3;
or4 = or2 with ireturn iparam4;
end or4;

s b_xnor2_def = xnors two bools;
s b_xnor2_params = @iparam1 @iparam2 -> @ireturn;
f xnor2 b_xnor2_def b_xnor2_params;
xnor2 = i b_xnor2_ph = false;
xnor2 = ireturn = false;
xnor2 = {iparam1==true} b_xnor2_ph = true;
xnor2 = {iparam2==b_xnor2_ph} ireturn = true;
end xnor2;

s b_not_def = nots a bool;
s b_not_params = @iparam1 -> @ireturn;
f not b_not_def b_not_params;
not = {iparam1==true} ireturn = false;
not = {iparam1==false} ireturn = true;
end not;

s b_equals_def = determines if two objects are equal;
s b_equals_params = @oparam1 @oparam2 -> @ireturn;
f equals b_equals_def b_equals_params;
equals = ireturn = false;
equals = {oparam1==oparam2} ireturn = true;
end equals;

s b_notequal_def = determines if two objects are not equal;
s b_notequal_params = @oparam1 @oparam2 -> @ireturn;
f notequal b_notequal_def b_notequal_params;
notequal = ireturn = false;
notequal = {oparam1!=oparam2} ireturn = true;
end notequal;


:: end;