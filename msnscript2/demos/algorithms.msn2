# demonstrates algorithmic capabilities
# author : Mason Marker
# date : 11/13/2022

# fresh console
if (windows(), console('cls'), console('clear'))

# import timer for speed testing
import ('lib/timer.msn2')




print('------------------------------ FREQUENCY MAP ------------------------------')

# determines the frequency of each element in the array in linear time
~ freqmap(array) -> map
-- var('map', {})
-- each(?array?, 'e', =>(
    if (?e? in ?map?, =>(
        set('map', ?e?, ?map?[?e?] + 1)
    ), =>(
        set('map', ?e?, 1)
    )) 
)) 

# runs a test on the frequency map algorithm
~ test_freqmap(test_array) -> _
-- timer_start()
-- var('fm', freqmap(?test_array?))
-- timer_end()
-- print('freqmap of', ?test_array?, 'is', ?fm?)
-- print('determined in', <<|timer_runtime()|s>>)
-- print()


# test 1
test_freqmap([1, 2, 3, 4, 5, 1, 2, 3])

# test 2
test_freqmap([8, 8, 8, 6, 6, 6, 4, 4, 4, 2, 2, 2])

# test 3
test_freqmap([0, 0, 3, 2, 1])
print('---------------------------------------------------------------------------')
print()



print('------------------------------ SUM ------------------------------')

# performs insertion sort algorithm
~ sum(arr) -> sum
-- if (<< |len(?arr?)| == 0 >>, var('sum', None), var('sum', 0))
-- each(?arr?, 'e', add('sum', ?e?))

# runs a test on the frequency map algorithm
~ test_sum(test_array) -> _
-- timer_start()
-- var('fm', sum(?test_array?))
-- timer_end()
-- print('sum of', ?test_array?, 'is', ?fm?)
-- print('determined in', <<|timer_runtime()|s>>)
-- print()

test_sum([1,2,3])
test_sum([1,2,3, 4])
test_sum([1,2])
test_sum([1])
test_sum([])
print('---------------------------------------------------------------------------')


print('------------------------------ AVERAGE ------------------------------')

# performs insertion sort algorithm
# method should be executed privately
~ average(arr) -> avg
-- if (<< |len(?arr?)| == 0>>, =>(
    var('avg', None),
    break()
))
-- var('avg', << |sum(?arr?)| / |len(?arr?)|  >>)

# runs a test on the frequency map algorithm
~ test_average(test_array) -> _
-- timer_start()
-- private(exportas('fm', average(?test_array?)))
-- timer_end()
-- print('avg of', ?test_array?, 'is', ?fm?)
-- print('determined in', <<|timer_runtime()|s>>)
-- print()

test_average([1,2,3])
test_average([1,2,3, 4])
test_average([1,2, 3, 4, 5])
test_average([1])
test_average([])
print('---------------------------------------------------------------------------')
