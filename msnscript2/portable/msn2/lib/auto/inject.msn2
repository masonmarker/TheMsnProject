# Injecting JavaScript into a webpage
#
# author : Mason Marker
# date : 6/2/2023



# Helper method, opens the element inspection console,
# opens, and navigates to it
# 
# _appinstance: the browser instance to open the console in
# returns the Console button found within the inspect element panel
function('_console_open', ret('_console_open', (
     # presses keys at the same time to inspect element
    # equivalent to _appinstance.press('VK_CONTROL', 'VK_SHIFT', 'i')
    _appinstance.inspect(),

    # if the console button has not been found, find it
    wait(@ _console_button = first(_appinstance.find_tabitems('Console'))),

    # enters the console tab
    _console_button.click(),

    # clears the console
    _appinstance.press('VK_CONTROL', 'l'),

    # returns the console button
    console_button
)),'_appinstance')


# Helper method, writes special characters to the console depending
# on the argument type
#
# _appinstance: the browser instance to write to
# _scripts: either an array of strings, each string being a block of JavaScript to inject,
#           or a string of a single block of JavaScript
# returns None
function('_console_write_special', if (isstr(_scripts), (
        # inject the script
        _appinstance.write_special(_scripts),
        _appinstance.enter()
    ), _scripts.each('_js_block', (
        # writes into the console a string
        # with special characters requiring simultaneous key presses,
        # such as '!' or ')', and even capital letters
        _appinstance.write_special(_js_block),

        # execute the script
        _appinstance.enter()
    ))), '_appinstance', '_scripts')


# -------------------- END OF HELPER METHODS --------------------



# Retrieves the output of the most recently executed script in the
# element inspection console.
# 
# To safely execute, the script should only exist in the console
#
# _appinstance: the browser instance to retrieve the console output from
# _distance, the distance from the script's entry to its output, default is listed if
#            argument is None
# returns the console output
function('retrieve_output', ret('retrieve_output', (

    # gets the last child with the script
    @ _lastchildwithscript = last(_appinstance.find_links('_app-')),

    # if not distance, set to default
    if (not(_distance), @ _distance = 5),

    # gets the output
    @ _lastchildwithscript_result = _lastchildwithscript.element_below(_distance),

    # returns the output
    _lastchildwithscript_result.text()

)), '_appinstance', '_distance')

# injects JavaScript into a Chrome URL,
# opens a new instance of Chrome without killing
# any existing instances
#
# _url: the URL to navigate to
# _scripts: either an array of strings, each string being a block of JavaScript to inject, 
#           or a string of a single block of JavaScript
#
# creates a variable in the global scope called inject:console_button
# so the button does not have to be found again
function('inject', ret('inject', (

    # declares and starts a new Chrome instance
    @ _appinstance = app('C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'),
    _appinstance.start(),

    # writes the URL to Chrome,
    # and searches
    _appinstance.write(_url),
    _appinstance.enter(),

    # opens the element inspection
    @inject:console_button = _console_open(_appinstance),

    # write the scripts to the console
    _console_write_special(_appinstance, _scripts),

    _appinstance

    # _url: the URL to navigate to
    # _script: either an array of strings, each string being a block of JavaScript to inject,
    #          or a string of a single block of JavaScript
)), '_url', '_scripts')

# injects JavaScript into an already opened Chrome instance
#
# Much more versatile than inject(), provides the option 
# to specify whether the inspect element tab is open or not,
# this could technically be detected automatically, but possibly
# at an unreasonable and unneccessary time cost.
#
# _appinstance: Browser instance to inject into
# _scripts: either an array of strings, each string being a block of JavaScript to inject,
#           or a string of a single block of JavaScript
# _inspect_is_open: whether the inspect element tab is already open or not
#
# creates a variable called active_inject:console_button in the global scope
# so the button does not have to be found again
function('active_inject', (

    # if the inspection is not open, open 
    # and navigate
    if (not(_inspect_is_open), @active_inject:console_button = _console_open(_appinstance)),

    # write the scripts to the console
    _console_write_special(_appinstance, _scripts),

    # attempts to retrieve and return the console output
    ret('active_inject', retrieve_output(_appinstance,))
), '_appinstance', '_scripts', '_inspect_is_open')
