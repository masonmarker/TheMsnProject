# Updated suggested usage and syntax.
#
# Usage not seen here is recommended in the 
# previous version of this file.
#
# author : Mason Marker
# date : 5/30/2023

# fresh console
import ('lib/os.msn2')
clear()

# ----------------------- VARIABLES -----------------------
@ a = 1

# repeated access syntax method 1
a.(add(1, 2, 3),add(4, 5))
assert(a.equals(16))

# repeated access syntax method 2
a.(sub(1, 2, 3), sub(4, 5))
assert(a.equals(1))


# arrays
@ array = [1, 2, 3, 4, 5]

array.(add(6),remove(3),filter('el', el.greater(2)))
assert(array.equals([4, 5, 6]))

# strings
@ string = 'hello this is a string'
@ char = string.(reverse(),upper(),get(0))
assert(string.equals('GNIRTS A SI SIHT OLLEH'))
assert(char.equals('G'))



# ---------------- MULTI LINED ARGUMENT ----------------

# both the =>() system call and () now perform the same
# operations
#
# () takes any amount of arguments, and returns the value
# of the last argument provided
#
# () was implemented 6/1/2023 as a more readable alternative
# to =>(), though they do the same thing, it just looks better tbh
(
    @ a = 1,
    assert(a)
)

# () can be put literally anywhere, at any time,
# and simply exists to provide multiple lined interpretation
# directly inline with the rest of the code
assert((
    @ a = 0,
    a.inc()
))


# ----------------------- CLASSES -----------------------
class('person', (
    @ age = -1,
    @ name = 'Unknown',

    # advances time for this person
    function('advance_time', self.age(years.+(self.age())), 'self', 'years')
))

# creates a person
@ mason = person(22, 'mason')

# advances time for a few years
mason.(advance_time(3), advance_time(1))
assert(equals(mason.age(), 26))


# class with constructor
class('person', (
    @ age = -1,
    @ name = 'Unknown',

    # constructor
    function('const', self.name(as('_t', self.name(), _t.upper())) , 'self')
))

# creates a person
@ mason = person(22, 'mason')
assert(equals(mason.name(), 'MASON'))

# changes a person's name
mason.name('masonator')
assert(equals(mason.name(), 'masonator'))

# re-building an object (re-running the constructor)
mason.const()
assert(equals(mason.name(), 'MASONATOR'))

# ----------------------- THREADS -----------------------
# threads are started with the thread(name, code) system call

thread('t', (@g=0,wait(equals(g.inc(), 10))))

# joins with the thread
join('t')

# assert that the thread has finished
assert(g.equals(10))

# ----------------------- PROCESSES -----------------------
# processes are started using the following template:
#
#
# import ('lib/processes.msn2')
# fork(process_name, script(
#   print('hello from process_name')
# ))
#
#
# script() is equivalent to async()

# ----------------------- AUTOMATION -----------------------
# Provides control over a Windows computer and 
# window's applications
# 
# basics:
# app(path) -> returns an instance of the application
#              at the path provided, this variable would
#              be used to control the application
# pointer class:
# controls the basics of the mouse pointer
# ex: pointer.click()
#
# 
# ----------------------- LOOPS -----------------------
# loops can be performed in several ways, from the each(), for(), and while()
# system calls, to the .each() method, and start|end|var| () system call

# for()
@ g = 0
for(0, 5, 'i', @g += 1)
assert(g.equals(5))

# while()
@ g=0
while(g.less(5),g.inc())
assert(g.equals(5))

# each()
@g= 0
each([1, 2, 3], 'e', g.add(e))
assert(g.equals(6))

# .each()
@ g = [1, 2, 3]
@ s = 0
g.each('e', s.add(e))
assert(s.equals(6))

# start|end|var|()
# start and end cannot contain parantheses
# within the argument
#
# 0|len(array)|i ()    <- NOT OK
#
# @ len = len(array)
# 0|len|i ()           <- OK
#
#
@ g = 0
0|5|i (g.inc())
assert(g.equals(5))


# ----------------------- CONDITIONALS -----------------------
# same as the previous suggested usage file.
# however variable access updates allow for a better
# use of ?() system call
#
#
#
# a conditional should exist between the ? and the first '('
# similary to the || for loop syntax, the argument cannot
# contain parantheses

@ t = 1
? t (assert(1), assert(0))
@ f = not(t)
? f (assert(0), assert(1))


# arithmetic
#
# 6/13/2023
# added more efficient math system calls
# (these really should have been added a long time ago)
# +() -() *() /() //() %() ^()
#
# note that -() with 1 argument takes a string of msn2 code
# any more and it acts as a subtraction mechanism

@ a = 1
@ b = 2
assert(equals(+(a, b, 1), 4))
assert(equals(-(a, b, 1), -2))
assert(equals(x(a, b, 2), 4))
assert(equals(/(a, b, 2), 0.25))
assert(equals(//(a, b, 2), 0))
assert(equals(%(a, b, 2), 1))
assert(equals(^(a, b, 2), 1))

assert(equals(^(2, 4), 16))


# ----------------------- MULTIPROGRAMMING -----------------------

# use the proc() system call to create a new process
proc('p1', assert(1))

# use the thread() system call with or without a
# name to start a new thread
thread('t1', assert(1))
thread(assert(1))

# use the threadpool(count, block) system call to create a new  
# threadpool
threadpool(3, assert(1))

