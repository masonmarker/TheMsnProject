# Demonstrates interpretation and execution of
# other language constructs.
#
# author : Mason Marker
# date : 6/13/2023

# import language directory
# for automatic cleanup
import ('lib/lang/dir')

# import timer for timing execution 
import ('lib/timer')

# function for printing the runtime
function('rt', print('timer runtime:', timer_runtime()))


# shared variable
@ len = 99999999



# -------------------- JavaScript --------------------
# start the timer
timer_start()



# running JavaScript via 'node __filepath__'
# not using reduce() for demonstration purposes
# <msn2> tags are replaced with the 
# interpretation of the internal code
@ env = JS(

    function sum(array) {
        var sum = 0;
        for (var i = 0; i < array.length; i++) {
            sum += array[i];
        }
        return sum;
    }
    
    var a = [];
    
    for (let i = 0; i < <msn2element>len</msn2element>; i++) {
        a.push(1);
    }
    console.log(sum(a));
)

# print the runtime
rt()


# print JavaScripts output
print('JavaScript:', env.out())
# ------------------------------------------------------



# -------------------- C --------------------
# start timer again
timer_start()

# compiling and running a C program
# <tag> is replaced with a hashtag,
# <nl> is replaced with a newline
# <msn2> tags are replaced with the 
# interpretation of the internal code
@ env = C(
    <tag>include <stdio.h><nl>
    <tag>include <stdlib.h><nl>


    int arraySum(int arr[], int size) {
        int sum = 0;
        
        for (int i = 0; i < size; i++) {
            sum += arr[i];
        }
        
        return sum;
    }

    int main() {
        int size = <msn2element>len</msn2element>;
        int* arr = malloc(sizeof(int) * size);
        if (arr == NULL) {
            printf("Error allocating memory");
            return 1;
        }

        for (int i = 0; i < size; i++) {
            arr[i] = 1;
        }

        printf("%d", arraySum(arr, size));

        free(arr);
    }
)

# print the runtime
rt()

# print C's output
print('C:', env.out())
# ------------------------------------------------------



# cleanup lang directory
__lang_dir_.end()