# validates integrity of the current MSNScript2 interpreter
#
# author : Mason Marker
# date : 11/27/2022





# ------------------ SETUP ------------------

# imports operating system specific 'clear' console command
import ('lib/os.msn2')

# imports timing capabilities
import ('lib/timer.msn2')

# clear console
clear()

# -------------------------------------------


# testing variables
var('a', 1)
var('b', 2)
var('c', 3)
var('d', 4)
var('e', 5)
var('f', 6)


# ------------------ VARIABLES ------------------

# tests basic variable functions
~ test_var() -> _

    -- print('[+] testing variables...')

    # asserts all variables exist in this context
    -- assert(exists('a'), exists('b'), exists('c'), exists('d'), exists('e'), exists('f'))

    # asserts that variables are being set correctly
    -- assert(?a? == 1, ?b? == 2, ?c? == 3, ?d? == 4, ?e? == 5, ?f? == 6)

    # asserts that variables are compared correctly
    -- assert(?a? < ?b?, ?b? < ?c?, ?c? < ?d?, ?d? < ?e?, ?e? < ?f?)

    # asserts that variables are being modified correctly
    -- var('a', 2)
    -- var('b', 3)
    -- var('c', 4)
    -- var('d', 5)
    -- var('e', 6)
    -- var('f', 7)

    -- assert(?a? == 2, ?b? == 3, ?c? == 4, ?d? == 5, ?e? == 6, ?f? == 7)

    # modifying variables in place
    -- add('a', 1)
    -- add('b', 1)
    -- add('c', 1)
    -- add('d', 1)
    -- add('e', 1)
    -- add('f', 1)

    -- assert(?a? == 3, ?b? == 4, ?c? == 5, ?d? == 6, ?e? == 7, ?f? == 8)

    -- sub('a', 1)
    -- sub('b', 1)
    -- sub('c', 1)
    -- sub('d', 1)
    -- sub('e', 1)
    -- sub('f', 1)

    -- assert(?a? == 2, ?b? == 3, ?c? == 4, ?d? == 5, ?e? == 6, ?f? == 7)

    -- mul('a', 2)
    -- mul('b', 2)
    -- mul('c', 2)
    -- mul('d', 2)
    -- mul('e', 2)
    -- mul('f', 2)

    -- assert(?a? == 4, ?b? == 6, ?c? == 8, ?d? == 10, ?e? == 12, ?f? == 14)

    -- div('a', 2)
    -- div('b', 2)
    -- div('c', 2)
    -- div('d', 2)
    -- div('e', 2)
    -- div('f', 2)

    -- assert(?a? == 2, ?b? == 3, ?c? == 4, ?d? == 5, ?e? == 6, ?f? == 7)


    -- var('_', True)


# -------------------------------------------



# ------------------ MATH ------------------

# tests basic math functions   
~ test_math() -> _

    -- print('[+] testing math...')

    # asserts addition works correctly
    -- assert(1 + 1 == 2, 2 + 2 == 4, 3 + 3 == 6, 4 + 4 == 8, 5 + 5 == 10, 6 + 6 == 12)

    # asserts subtraction works correctly
    -- assert(1 - 1 == 0, 2 - 2 == 0, 3 - 3 == 0, 4 - 4 == 0, 5 - 5 == 0, 6 - 6 == 0)

    # asserts multiplication works correctly
    -- assert(1 * 1 == 1, 2 * 2 == 4, 3 * 3 == 9, 4 * 4 == 16, 5 * 5 == 25, 6 * 6 == 36)

    # asserts division works correctly
    -- assert(1 / 1 == 1, 2 / 2 == 1, 3 / 3 == 1, 4 / 4 == 1, 5 / 5 == 1, 6 / 6 == 1)

    # asserts modulo works correctly
    -- assert(1 % 1 == 0, 2 % 2 == 0, 3 % 3 == 0, 4 % 4 == 0, 5 % 5 == 0, 6 % 6 == 0)

    # asserts exponentiation works correctly
    -- assert(1 ** 1 == 1, 2 ** 2 == 4, 3 ** 3 == 27, 4 ** 4 == 256, 5 ** 5 == 3125, 6 ** 6 == 46656)

    # asserts that integer division works correctly
    -- assert(1 // 1 == 1, 2 // 2 == 1, 3 // 3 == 1, 4 // 4 == 1, 5 // 5 == 1, 6 // 6 == 1)

    # modifies variables
    -- var('a', 2)
    -- var('b', 3)
    -- var('c', 4)
    -- var('d', 5)
    -- var('e', 6)
    -- var('f', 7)

    # asserts the same for variables
    -- assert(?a? + ?a? == 4, ?b? + ?b? == 6, ?c? + ?c? == 8, ?d? + ?d? == 10, ?e? + ?e? == 12, ?f? + ?f? == 14)
    -- assert(?a? - ?a? == 0, ?b? - ?b? == 0, ?c? - ?c? == 0, ?d? - ?d? == 0, ?e? - ?e? == 0, ?f? - ?f? == 0)
    -- assert(?a? * ?a? == 4, ?b? * ?b? == 9, ?c? * ?c? == 16, ?d? * ?d? == 25, ?e? * ?e? == 36, ?f? * ?f? == 49)
    -- assert(?a? / ?a? == 1, ?b? / ?b? == 1, ?c? / ?c? == 1, ?d? / ?d? == 1, ?e? / ?e? == 1, ?f? / ?f? == 1)
    -- assert(?a? % ?a? == 0, ?b? % ?b? == 0, ?c? % ?c? == 0, ?d? % ?d? == 0, ?e? % ?e? == 0, ?f? % ?f? == 0)
    -- assert(?a? ** ?a? == 4, ?b? ** ?b? == 27, ?c? ** ?c? == 256, ?d? ** ?d? == 3125, ?e? ** ?e? == 46656, ?f? ** ?f? == 823543)
    -- assert(?a? // ?a? == 1, ?b? // ?b? == 1, ?c? // ?c? == 1, ?d? // ?d? == 1, ?e? // ?e? == 1, ?f? // ?f? == 1)


    -- var('_', True)
# -------------------------------------------




# ------------------ STRINGS ------------------

~ test_strings() -> _

    -- print('[+] testing strings...')

    # modifies variables
    -- var('a', 'hello')
    -- var('b', 'world')
    
    # asserts that strings are being set correctly
    -- assert(?a? == 'hello', ?b? == 'world')

    # asserts that strings are being concatenated correctly
    -- assert(?a? + ?b? == 'helloworld')

    # asserts that strings are being multiplied correctly
    -- assert(?a? * 2 == 'hellohello', ?b? * 2 == 'worldworld')

    # asserts that strings are being modified correctly
    -- add('a', 'hello')
    -- assert(?a? == 'hellohello')

    # replacing with converge operator <<>> (python fallback mechanism)
    -- assert(<<|?a?|.replace('hello', '') == ''>>)

    # replacing with converge operator <<>> (python fallback mechanism)
    -- assert(<<|?a?|.replace('hello', 'world') == 'worldworld'>>)

    # splitting with converge operator <<>> (python fallback mechanism)
    -- assert(<<|?a?|.split('h') == ['', 'ello', 'ello']>>)

    # getting a character in a string
    -- assert(?a?[0] == 'h')
    -- assert(?a?[1] == 'e')
    -- assert(?a?[2] == 'l')
    -- assert(?a?[3] == 'l')
    -- assert(?a?[4] == 'o')

    # special characters
    -- assert('\\' == '\\', '\'' == '\'', '\"' == '\"', '\n' == '\n', '\t' == '\t', '\r' == '\r')

    -- var('a', 'hello')

    -- a.add(' how are you?')
    -- assert(?a? == 'hello how are you?')    

    -- a.add('\n')

    # when working with special characters, you cannot use 
    -- var('checker', 'hello how are you?\n')
    -- assert(var.equals('a', 'checker'))


    -- env(True)



    -- var('_', True)

# -------------------------------------------


# ------------------ ARRAYS ------------------

~ test_arrays() -> _

    -- print('[+] testing arrays...')

    # sets an array
    -- var('a', [1, 2, 3, 4, 5, 6])

    # asserts that the array is being set correctly
    -- assert(?a? == [1, 2, 3, 4, 5, 6])

    # asserts that the array is being concatenated correctly
    -- assert(?a? + [7, 8, 9, 10, 11, 12] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])

    # asserts that the array is being multiplied correctly
    -- assert(?a? * 2 == [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6])

    # asserts that the array is being modified correctly
    -- a.push(7, 8, 9)
    -- assert(?a? == [1, 2, 3, 4, 5, 6, 7, 8, 9])
    -- a . push(10)
    -- assert(?a? == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

    # asserts that removen() works correctly
    -- a.push(3, 3, 3)

    # removes 2 3's from 'a'
    -- a.removen(2, 3)

    -- assert(?a? == [1, 2, 4, 5, 6, 7, 8, 9, 10, 3, 3])

    # removes 1 '1' and 1 '2' from 'a'
    -- a.removen(1, 1, 2)

    -- assert(?a? == [4, 5, 6, 7, 8, 9, 10, 3, 3])

    # remove if not exists, catches value error
    -- try(a.removen(1, 1))

    -- assert(?a? == [4, 5, 6, 7, 8, 9, 10, 3, 3])

    # tests remove
    -- a.remove(3)

    -- assert(?a? == [4, 5, 6, 7, 8, 9, 10])








# start the timer
timer_start()


# runs tests in their own private environment
# a private block inherits copies of all variables and methods from the parent context
private(test_var())
private(test_math())
private(test_strings())
private(test_arrays())


# ends the timer and prints finishing boot environment
print('[+] fin in', <<|timer_runtime()|s>>)
