# validates integrity of the current MSNScript2 interpreter
#
# author : Mason Marker
# date : 11/27/2022





# ------------------ SETUP ------------------

# imports operating system specific 'clear' console command
import ('lib/os.msn2')

# imports timing capabilities
import ('lib/timer.msn2')

# clear console
clear()

# -------------------------------------------


# testing variables
var('a', 1)
var('b', 2)
var('c', 3)
var('d', 4)
var('e', 5)
var('f', 6)


# ------------------ VARIABLES ------------------

# tests basic variable functions
~ test_var() -> _

    -- print('[+] testing variables...')

    # asserts all variables exist in this context
    -- assert(exists('a'), exists('b'), exists('c'), exists('d'), exists('e'), exists('f'))

    # asserts that variables are being set correctly
    -- assert(?a? == 1, ?b? == 2, ?c? == 3, ?d? == 4, ?e? == 5, ?f? == 6)

    # asserts that variables are compared correctly
    -- assert(?a? < ?b?, ?b? < ?c?, ?c? < ?d?, ?d? < ?e?, ?e? < ?f?)

    # asserts that variables are being modified correctly
    -- var('a', 2)
    -- var('b', 3)
    -- var('c', 4)
    -- var('d', 5)
    -- var('e', 6)
    -- var('f', 7)

    -- assert(?a? == 2, ?b? == 3, ?c? == 4, ?d? == 5, ?e? == 6, ?f? == 7)

    # modifying variables in place
    -- add('a', 1)
    -- add('b', 1)
    -- add('c', 1)
    -- add('d', 1)
    -- add('e', 1)
    -- add('f', 1)

    -- assert(?a? == 3, ?b? == 4, ?c? == 5, ?d? == 6, ?e? == 7, ?f? == 8)

    -- sub('a', 1)
    -- sub('b', 1)
    -- sub('c', 1)
    -- sub('d', 1)
    -- sub('e', 1)
    -- sub('f', 1)

    -- assert(?a? == 2, ?b? == 3, ?c? == 4, ?d? == 5, ?e? == 6, ?f? == 7)

    -- mul('a', 2)
    -- mul('b', 2)
    -- mul('c', 2)
    -- mul('d', 2)
    -- mul('e', 2)
    -- mul('f', 2)

    -- assert(?a? == 4, ?b? == 6, ?c? == 8, ?d? == 10, ?e? == 12, ?f? == 14)

    -- div('a', 2)
    -- div('b', 2)
    -- div('c', 2)
    -- div('d', 2)
    -- div('e', 2)
    -- div('f', 2)

    -- assert(?a? == 2, ?b? == 3, ?c? == 4, ?d? == 5, ?e? == 6, ?f? == 7)


    -- var('_', True)


# -------------------------------------------



# ------------------ MATH ------------------

# tests basic math functions   
~ test_math() -> _

    -- print('[+] testing math...')

    # asserts addition works correctly
    -- assert(1 + 1 == 2, 2 + 2 == 4, 3 + 3 == 6, 4 + 4 == 8, 5 + 5 == 10, 6 + 6 == 12)

    # asserts subtraction works correctly
    -- assert(1 - 1 == 0, 2 - 2 == 0, 3 - 3 == 0, 4 - 4 == 0, 5 - 5 == 0, 6 - 6 == 0)

    # asserts multiplication works correctly
    -- assert(1 * 1 == 1, 2 * 2 == 4, 3 * 3 == 9, 4 * 4 == 16, 5 * 5 == 25, 6 * 6 == 36)

    # asserts division works correctly
    -- assert(1 / 1 == 1, 2 / 2 == 1, 3 / 3 == 1, 4 / 4 == 1, 5 / 5 == 1, 6 / 6 == 1)

    # asserts modulo works correctly
    -- assert(1 % 1 == 0, 2 % 2 == 0, 3 % 3 == 0, 4 % 4 == 0, 5 % 5 == 0, 6 % 6 == 0)

    # asserts exponentiation works correctly
    -- assert(1 ** 1 == 1, 2 ** 2 == 4, 3 ** 3 == 27, 4 ** 4 == 256, 5 ** 5 == 3125, 6 ** 6 == 46656)

    # asserts that integer division works correctly
    -- assert(1 // 1 == 1, 2 // 2 == 1, 3 // 3 == 1, 4 // 4 == 1, 5 // 5 == 1, 6 // 6 == 1)

    # modifies variables
    -- var('a', 2)
    -- var('b', 3)
    -- var('c', 4)
    -- var('d', 5)
    -- var('e', 6)
    -- var('f', 7)

    # asserts the same for variables
    -- assert(?a? + ?a? == 4, ?b? + ?b? == 6, ?c? + ?c? == 8, ?d? + ?d? == 10, ?e? + ?e? == 12, ?f? + ?f? == 14)
    -- assert(?a? - ?a? == 0, ?b? - ?b? == 0, ?c? - ?c? == 0, ?d? - ?d? == 0, ?e? - ?e? == 0, ?f? - ?f? == 0)
    -- assert(?a? * ?a? == 4, ?b? * ?b? == 9, ?c? * ?c? == 16, ?d? * ?d? == 25, ?e? * ?e? == 36, ?f? * ?f? == 49)
    -- assert(?a? / ?a? == 1, ?b? / ?b? == 1, ?c? / ?c? == 1, ?d? / ?d? == 1, ?e? / ?e? == 1, ?f? / ?f? == 1)
    -- assert(?a? % ?a? == 0, ?b? % ?b? == 0, ?c? % ?c? == 0, ?d? % ?d? == 0, ?e? % ?e? == 0, ?f? % ?f? == 0)
    -- assert(?a? ** ?a? == 4, ?b? ** ?b? == 27, ?c? ** ?c? == 256, ?d? ** ?d? == 3125, ?e? ** ?e? == 46656, ?f? ** ?f? == 823543)
    -- assert(?a? // ?a? == 1, ?b? // ?b? == 1, ?c? // ?c? == 1, ?d? // ?d? == 1, ?e? // ?e? == 1, ?f? // ?f? == 1)

    # working with floats
    -- var('a', 2.0)
    -- var('b', 3.0)
    -- var('c', 4.0)
    -- var('d', 5.0)
    -- var('e', 6.0)
    -- var('f', 7.0)

    # asserts the same for variables
    -- assert(?a? + ?a? == 4.0, ?b? + ?b? == 6.0, ?c? + ?c? == 8.0, ?d? + ?d? == 10.0, ?e? + ?e? == 12.0, ?f? + ?f? == 14.0)
    -- assert(?a? - ?a? == 0.0, ?b? - ?b? == 0.0, ?c? - ?c? == 0.0, ?d? - ?d? == 0.0, ?e? - ?e? == 0.0, ?f? - ?f? == 0.0)
    -- assert(?a? * ?a? == 4.0, ?b? * ?b? == 9.0, ?c? * ?c? == 16.0, ?d? * ?d? == 25.0, ?e? * ?e? == 36.0, ?f? * ?f? == 49.0)
    -- assert(?a? / ?a? == 1.0, ?b? / ?b? == 1.0, ?c? / ?c? == 1.0, ?d? / ?d? == 1.0, ?e? / ?e? == 1.0, ?f? / ?f? == 1.0)
    -- assert(?a? % ?a? == 0.0, ?b? % ?b? == 0.0, ?c? % ?c? == 0.0, ?d? % ?d? == 0.0, ?e? % ?e? == 0.0, ?f? % ?f? == 0.0)
    -- assert(?a? ** ?a? == 4.0, ?b? ** ?b? == 27.0, ?c? ** ?c? == 256.0, ?d? ** ?d? == 3125.0, ?e? ** ?e? == 46656.0, ?f? ** ?f? == 823543.0)
    -- assert(?a? // ?a? == 1.0, ?b? // ?b? == 1.0, ?c? // ?c? == 1.0, ?d? // ?d? == 1.0, ?e? // ?e? == 1.0, ?f? // ?f? == 1.0)

    # working with negative numbers and larger decimals
    -- var('a', -2.532)
    -- var('b', -3.123)
    -- var('c', -4.123)
    -- var('d', -5.123)
    -- var('e', -6.123)
    -- var('f', -7.123)

    # asserts the same for variables
    -- assert(?a? + ?a? == -5.064, ?b? + ?b? == -6.246, ?c? + ?c? == -8.246, ?d? + ?d? == -10.246, ?e? + ?e? == -12.246, ?f? + ?f? == -14.246)
    -- assert(?a? - ?a? == 0.0, ?b? - ?b? == 0.0, ?c? - ?c? == 0.0, ?d? - ?d? == 0.0, ?e? - ?e? == 0.0, ?f? - ?f? == 0.0)
    -- assert(equals(round(?a? * ?a?), 6))
    -- assert(equals(round(?b? * ?b?), 10))
    -- assert(equals(round(?c? * ?c?), 17))
    -- assert(equals(round(?d? * ?d?), 26))
    -- assert(equals(round(?e? * ?e?), 37))
    -- assert(equals(round(?f? * ?f?), 51))

    -- assert(?a? / ?a? == 1.0, ?b? / ?b? == 1.0, ?c? / ?c? == 1.0, ?d? / ?d? == 1.0, ?e? / ?e? == 1.0, ?f? / ?f? == 1.0)

    -- var('_', True)
# -------------------------------------------




# ------------------ STRINGS ------------------

~ test_strings() -> _

    -- print('[+] testing strings...')

    # modifies variables
    -- var('a', 'hello')
    -- var('b', 'world')
    
    # asserts that strings are being set correctly
    -- assert(?a? == 'hello', ?b? == 'world')

    # asserts that strings are being concatenated correctly
    -- assert(?a? + ?b? == 'helloworld')

    # asserts that strings are being multiplied correctly
    -- assert(?a? * 2 == 'hellohello', ?b? * 2 == 'worldworld')

    # asserts that strings are being modified correctly
    -- add('a', 'hello')
    -- assert(?a? == 'hellohello')

    # replacing with converge operator <<>> (python fallback mechanism)
    -- assert(<<|?a?|.replace('hello', '') == ''>>)

    # replacing with converge operator <<>> (python fallback mechanism)
    -- assert(<<|?a?|.replace('hello', 'world') == 'worldworld'>>)

    # splitting with converge operator <<>> (python fallback mechanism)
    -- assert(<<|?a?|.split('h') == ['', 'ello', 'ello']>>)

    # getting a character in a string
    -- assert(?a?[0] == 'h')
    -- assert(?a?[1] == 'e')
    -- assert(?a?[2] == 'l')
    -- assert(?a?[3] == 'l')
    -- assert(?a?[4] == 'o')

    # special characters
    -- assert('\\' == '\\', '\'' == '\'', '\"' == '\"', '\n' == '\n', '\t' == '\t', '\r' == '\r')

    -- var('a', 'hello')

    -- a.add(' how are you?')
    -- assert(?a? == 'hello how are you?')    

    -- a.add('\n')

    # when working with special characters, you cannot use ?? syntax
    -- var('checker', 'hello how are you?\n')
    -- assert(var.equals('a', 'checker'))

    -- var('_', True)

# -------------------------------------------


# ------------------ ARRAYS ------------------

~ test_arrays() -> _

    -- print('[+] testing arrays...')

    # sets an array
    -- var('a', [1, 2, 3, 4, 5, 6])

    # asserts that the array is being set correctly
    -- assert(?a? == [1, 2, 3, 4, 5, 6])

    # asserts that the array is being concatenated correctly
    -- assert(?a? + [7, 8, 9, 10, 11, 12] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])

    # asserts that the array is being multiplied correctly
    -- assert(?a? * 2 == [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6])

    # asserts that the array is being modified correctly
    -- a.push(7, 8, 9)
    -- assert(?a? == [1, 2, 3, 4, 5, 6, 7, 8, 9])
    -- a . push(10)
    -- assert(?a? == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

    # asserts that removen() works correctly
    -- a.push(3, 3, 3)

    # removes 2 3's from 'a'
    -- a.removen(2, 3)

    -- assert(?a? == [1, 2, 4, 5, 6, 7, 8, 9, 10, 3, 3])

    # removes 1 '1' and 1 '2' from 'a'
    -- a.removen(1, 1, 2)

    -- assert(?a? == [4, 5, 6, 7, 8, 9, 10, 3, 3])

    # remove if not exists, catches value error
    -- try(a.removen(1, 1))

    -- assert(?a? == [4, 5, 6, 7, 8, 9, 10, 3, 3])

    # tests remove
    -- a.remove(3)

    -- assert(?a? == [4, 5, 6, 7, 8, 9, 10])

    # assert contains (<<>> python fallback)
    -- assert(<< 4 in |?a?| and 5 in |?a?| and 6 in |?a?| and 7 in |?a?| and 8 in |?a?| and 9  in |?a?| and 10 in |?a?| >>)
    -- assert(<< 1 not in |?a?| and 2 not in |?a?| and 3 not in |?a?| >>)

    -- var('_', True)

# -------------------------------------------

# ------------------ CLASSES ------------------
~ test_classes() -> _

    -- print('[+] testing classes...')

    # declares a class called 'person' with two attributes
    -- class('person', =>(
        var('name', 'unknown'),
        var('age', -1)
    ))

    # creates an instance of a class
    -- var('joe', person('joe', 20))

    -- assert(exists('joe'))

    # assert vars were set
    -- assert(equals(joe.name(), 'joe'))
    -- assert(equals(joe.age(), 20))

    # set attributes of a class
    -- joe.name('joseph')
    -- joe.age(21)

    # reassert
    -- assert(equals(joe.name(), 'joseph'))
    -- assert(equals(joe.age(), 21))

    # copy of a person
    -- var('joe2', joe.copy())

    # assert that joe2 is a copy of joe
    -- assert(equals(joe2.name(), 'joseph'))
    -- assert(equals(joe2.age(), 21))

    # assert that joe2 is not joe
    -- joe2.name('joe2')
    -- joe2.age(22)

    -- assert(equals(joe2.name(), 'joe2'))
    -- assert(equals(joe2.age(), 22))

    -- assert(not(equals(joe.name(), 'joe2')))
    -- assert(not(equals(joe.age(), 22)))

    # create a family
    -- class('family', =>(
        var('members', [])
    ))

    -- var('fam', family([]))

    -- fam.members(=>(
        var('curr', fam.members()),
        curr.push(?joe?),
        ?curr?
    ))

    -- fam.members(=>(
        var('curr', fam.members()),
        curr.push(?joe2?),
        ?curr?
    ))

    -- assert(equals(?fam?['members'][0]['name'], 'joseph'))
    -- assert(equals(?fam?['members'][0]['age'], 21))
    -- assert(equals(?fam?['members'][1]['name'], 'joe2'))
    -- assert(equals(?fam?['members'][1]['age'], 22))

    -- assert(equals(fam.members(), [?joe?, ?joe2?]))

    -- var('_', True)



# ------------------ COMPLEX STUFF ------------------


~ test_complex() -> _

    -- print('[+] testing complex...')
    -- var('_', assert(
        assert(assert(True), assert(not(False))),
        assert(assert(<< not |False| >>), not(not(True))),
        assert(True and True, assert(True)),
        assert(assert(True), assert(True), assert(=>(
            var('z', -1),
            add('z', 1),
            ?z? == 0
        ))),
        assert(True or False),
        assert(3 != 3 or 5 != 1, [1, 2, 3] == [1, 2, 3]),
        assert(
            True,
            assert(assert(not False), assert(True)),
            assert(True),
            not False,

            # inline function syntax => ()
            # takes any amount of instructions separated by commas
            # can be used in place of any argument or instruction
            # returns the return value of the last instruction to => ()
            => (
                var('map', {'name': 'mason', 'age': 20}),
                ?map?['name'] == 'mason' and ?map?['age'] == 20
            ),
            => (
                var('a', False),
                ?a? or True
            ),

            True,
            assert(True),
            not(not(True))
        ),
        assert(True),
        assert(assert(True), assert(True))))


    -- var('_', True)


# ------------------ ACTUAL STUFF HAPPENING : THREADS ------------------


# semaphore support
import ('lib/semaphore.msn2')

# tests thread subroutines
~ test_threads() -> _

    -- print('[+] testing threads...')

    -- thread('t1', =>(
        var('count', 0),
        for (0, 10, 'i', =>(
            add('count', 1)
        )),
        assert(?count? == 10)
    ))

    # joins with newly created thread
    -- join('t1')

    # assert count is 10
    -- assert(?count? == 10)

    # testing semaphores
    # main thread grabs the semaphore before the new
    # thread is created
    -- var('sem', semaphore(True, ''))
    -- var('a', 0)

    # creates a new thread
    -- thread('t2', =>(

        # wait for the resource to be unlocked
        wait(not(sem.held())),

        # perform work
        add('a', 1),

        # release the semaphore
        sem.held(False)

    ))

    -- assert(sem.held())
    -- assert(equals(sem.message(), ''))

    # give the thread the semaphore
    -- sem.held(False)

    # offer the resource to the thread
    -- sleep(0.00001)

    # waits for the thread to give up the semaphore
    -- wait(not(sem.held()))

    # assert the thread released the semaphore
    -- assert(not(sem.held()))

    # assert that the work was finished
    -- assert(?a? == 1)


    -- var('_', True)


# -------------------------------------------




# ------------------ ACTUAL STUFF HAPPENING : MULTIPROCESSING ------------------

# multiprocessing support
import ('lib/processes.msn2')

# process naming serialization
import ('lib/serial.msn2')

# prepare serialization variable
serial_open('p')

~ test_processes() -> _ 

    -- print('[+] testing processes...')

    # creates a new process
    # second argument to fork() must be async() to save
    # the block of code for use by the newly created process
    -- fork('process1', async(=>(

        # process performs work
        var('forkvar', 0),
        assert(exists('forkvar')),
        for (0, 10, 'i', =>(
            add('forkvar', 1)
        )),
        assert(?forkvar? == 10)
    )))

    # joins with the process
    # same syntax as threads because fork() is a user method imported from lib/processes.msn2
    # thats starts the process from a new thread
    -- join('process1')
    
    -- assert(not(exists('forkvar')))


    -- var('_', True)


    # test 2

    -- var('a', 0)

    # starts two processes that perform work
    -- for(0, 2, 'i', =>(
        fork(?i?, async(=>(

            # process specific variables
            var('a', 0),
            var('b', 0),
            var('c', 0),
            assert(exists('a'), exists('b'), exists('c')),

            # if process 0
            if (?i? == 0, =>(

                # assert the variables exists
                assert(exists('a'), exists('b'), exists('c')),
                assert(not(exists('d')), not(exists('e')), not(exists('f'))),

                # modify the variables
                add('a', 1),
                add('b', 1),
                add('c', 1),

                # assert the variables were modified
                assert(?a? == 1, ?b? == 1, ?c? == 1),

                print('[+] p0 finished')
            ), 

            # else if process 1
            =>(
                # same as 0
                assert(exists('a'), exists('b'), exists('c')),
                assert(not(exists('d')), not(exists('e')), not(exists('f'))),
                add('a', 10),
                add('b', 10),
                add('c', 10),
                assert(?a? == 10, ?b? == 10, ?c? == 10),
                print('[+] p1 finished')
            ))
        )))
    ))

    # joins with the first process created
    -- join(0)

# -------------------------------------------




# ------------------ ACTUAL STUFF HAPPENING : ENDPOINTS ------------------

var('terminate', False)


# hosting an endpoint
~ test_endpoints() -> _

    # endpoints should reside in a new process
    -- fork('ep1', async(=>(
        
        # starts a new endpoint on localhost:5000 on a new thread
        thread('t', ENDPOINT('127.0.0.1', 5000, '/', {})),

        # waits for a signal to end the process, with a 0.05s interval
        wait(equals(GET('127.0.0.1', 5000, '/'), {'leave': 1}), sleep(0.05)),

        stop()
    )))
    
    # wait for endpoint to become active
    -- wait(equals(GET('127.0.0.1', 5000, '/'), {}), sleep(0.05))

    # assert endpoint is responsive
    -- assert(equals(GET('127.0.0.1', 5000, '/'), {}))

    # asserts post is working
    -- assert(equals(POST('127.0.0.1', 5000, '/', {'a': 1}), {'a': 1}))

    # asserts get is working
    -- assert(equals(GET('127.0.0.1', 5000, '/'), {'a': 1}))

    

    

    -- assert(equals(DELETE('127.0.0.1', 5000, '/'), {}))
    -- assert(equals(POST('127.0.0.1', 5000, '/', {'leave': 1}), {'leave': 1}))

    # this should be the last test listed, 
    # and the last test to finish, 
    # so stop() ends the validator program
    -- print('[+] shutting down validator and endpoint...')

    # ends the timer and prints finishing boot environment
    -- print('[+] fin in', cat(timer_runtime(), 's'))


    -- import('lib/processes.msn2')
    -- clean_processes()
    -- stop()


# ------------------ RANDOMNESS ------------------

# random implementation
~ test_random() -> _

    -- print(random())




















































# start the timer
timer_start()


# runs tests in their own private environment
# a private block inherits copies of all variables and methods from the parent context
thread('vars', private(assert(test_var())))
thread('math', private(assert(test_math())))
thread('strings', private(assert(test_strings())))
thread('arrays', private(assert(test_arrays())))
thread('classes', private(assert(test_classes())))
thread('complex', private(assert(test_complex())))
thread('threads', private(assert(test_threads())))

private(assert(test_processes()))
private(thread('tep', test_endpoints()))
