# Resources for speed.
#
# author : Mason Marker
# date : 9/6/2023
# updated in 2.0.387

import ('lib/timer')
import ('lib/os')
import ('lib/syntax/msn2plus')
os:clear()

# average timer runtime, subtracted from speed computations after they're made
@ timer_off = None
@ iterations = 50

# factors in timer offset to the runtime being analyzed
def('normalize', '__number', (
    var('__number', __number.-(timer_off)),
    if (__number.less(0), var('__normalized', 0), var('__normalized', __number))
))


# prints a test result
def('print_result', '__msg', '__rt', (
    print:color(
        object(
            'text', '[*] ',
            'style', 'bold',
            'fore', 'black'
        ),
        object(
            'text', __msg,
            'style', 'bold',
            'fore', 'magenta'
        ),
        object(
            'text', ': ',
            'style', 'bold',
            'fore', 'white'
        ),
        object(
            'text', cat(__rt, 's'),
            'style', 'bold',
            'back', 'green'
        )
    )
))

# tests the speed of the timer itself
def('set_off', (
    var('times', []),
    for(0, iterations, 'i', =>(
        timer:start(),
        var('rt', timer:runtime()),
        times.push(rt)   
    )),

    var('timer_off', times.avg()),
    print_result('timer setup (factored into below runtimes)', times.avg())
))


# runs a timer given an async block of code
def('run_timer', '__msg', '__code', (
    var('times', []),
    for(0, iterations, 'i', =>(
        timer:start(),
        -(__code),
        var('end', normalize(timer:runtime())),
        times.push(end)
    )),

    private(print_result(__msg, times.avg()))
))


# test macros for ease of testing
macro ('RESET', '__unused', @test_sort_arr=[10, 9, 8, 7, 6, 5, 4, 3, 2, 1])

# test macro, runs the line of code 100 times and obtains the average runtime
# then prints formatted result of the test
macro ('TEST', '__line', =>(
    var('__split', split(__line, ':::')),
    var('message', __split.get(0)),
    message.strip(),
    run_timer(-(message), __split.get(1))
))

# macro to run a private test, then print a divider
macro('SPEED ', '__line', =>(
    private(-(__line)),
    DIVIDER
))

macro('DIVIDER', '__unused', print('---------------------------------------'))

# computes and sets the timer's runtime offset that should be applied to a test
set_off()

# a common resource to use amongst tests
@ common = {'person': {'name': 'unknown', 'age': 45, 'children': [{'name': 'unknown', 'age': 3}]}}
