# tests execution speed of MSNScript2. 
#
# author : Mason Marker
# date : 12/11/2022

# as of 7/2/2023, much of this syntax shouldn't be used,
# including =>() and ??
# updated in 2.0.387

import('tests/speed/resources')

# ----------------------------- TESTS -----------------------------

# ----------------- NOTHING -----------------

# tests the time it takes to execute 1-3 lines each consisting of no instruction
# -------------------------------------------

# ----------------- SETTING VARIABLES -----------------

# tests classic variable setting runtime
def('test_vars', (
    TEST 'setting a var' ::: var('variable', common),
    TEST 'setting a var w macro' ::: @variable=|common|,
    TEST 'single var replacement' ::: common,
    TEST 'large math expression' ::: 45727356345634653947852/4358237456234562345920843509/549837245.529345234584752*4329780866246534659234209 - 23957983475298347592.543258729348753,
    TEST 'var name: getting val of var' ::: val('common'),
    TEST 'default: getting val of var' ::: common
))


# -------------------------------------------


# ----------------- PYTHON FALLBACK -----------------

# tests msn1 variable setting runtime 
def('test_fallback', (
    TEST 'python fallback' ::: <<>>,
    TEST 'python fallback w var' ::: << |common| >>
))

# -------------------------------------------

# ----------------- FUNCTIONS -----------------

# tests a basic system call
def('test_syscall', (
    TEST 'single syscall' ::: assert(1),
    TEST 'nested syscall' ::: assert(assert(1)),
    TEST '=>()' ::: =>(),
    TEST '=>(=>(), =>())' ::: =>(=>(), =>()),
    TEST '1 empty for loop run' ::: for(0, 2, 'i',),
    TEST '100 for loop runs' ::: for(0,100,'i',),
    TEST '1 simple for loop run' ::: 0|2|i(),
    TEST '100 simple for loop run' ::: 0|100|i(),
    TEST 'if' ::: if(1,),
    TEST 'if else' ::: if(0,,),
    TEST 'simple if' ::: ?1(),
    TEST 'simple if else' ::: ?0(,),
    TEST 'msn2 eval -()' ::: -(common),
    TEST '21 nested system calls' ::: =>(
        =>(=>(=>(=>(=>(=>(=>())))))),
        =>(=>(=>(=>(=>(=>(=>())))))),
        =>(=>(=>(=>(=>(=>(=>()))))))
    )
))

# user function
def('__', None)


# tests empty 
def('test_user_method', (
    TEST 'empty user method' ::: __()
))
# -------------------------------------------

# ----------------- ALGORITHMS -----------------
def('test_sort', (
    RESET,
    TEST 'sorting array of len 10' ::: test_sort_arr.sort(),
    RESET,
    TEST '^^ with python fallback' ::: << sorted(|test_sort_arr|) >>
))

# -------------------------------------------


# ----------------- CREATING MACROS / SYNTAX / POSTMACROS -----------------
def('test_macros', (
    TEST 'creating an empty macro' ::: macro(';', '__unused',),
    TEST 'invoking an empty macro' ::: ;
))
# -------------------------------------------

# ----------------------------- DIFFERENT FUNCTIONS -----------------------------
# there are several ways to create functions, this speed test should determine
# the speed at which each of these functions are declared and executed
def('test_diff_functions', (

    # testing function declaration 'def'
    # pros:
    # cons:
    TEST 'def' ::: def('test', None),
    TEST 'def invocation' ::: test(),
    
    # testing function declaration 'function'
    # pros:
    # cons:
    TEST 'function' ::: function('test', ret('test', None)),
    TEST 'function invocation' ::: test(),

    # testing function declaration '~'
    TEST '~' ::: ~test()->_,
    TEST '~ invocation' ::: test(),    
))

# -------------------------------------------

# ----------------------------- LOGIC HEAVY FUNCTIONS -----------------------------
def('test_heavy', (

    # script() has multiple layers of logic, including
    # - parsing
    # - tokenizing
    # - executing
    TEST 'script()' ::: script(),
    TEST "script('')" ::: script(''),
    TEST "script(hello world)" ::: script(hello world),
    TEST "script({=common=})" ::: script({=common=}),
    TEST "script({={=common=}=})" ::: script({={=common=}=}),
))

# ----------------------------- RUNNING TESTS -----------------------------

# macro to run a test

# prints a divider
DIVIDER

# run tests
SPEED test_vars()
SPEED test_fallback()
SPEED test_syscall()
SPEED test_sort()
SPEED test_user_method()
SPEED test_macros()
SPEED test_diff_functions()
SPEED test_heavy()