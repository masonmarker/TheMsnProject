# tests execution speed of MSNScript2. 
#
# author : Mason Marker
# date : 12/11/2022

import('tests/speed/resources.msn2')

# ----------------------------- TESTS -----------------------------

# ----------------- NOTHING -----------------

# tests the time it takes to execute 1-3 lines each consisting of no instruction
~ test_nothing()->_
    -- TEST 'empty instruction' :::

# -------------------------------------------

# ----------------- SETTING VARIABLES -----------------

# tests classic variable setting runtime
~ test_vars()->_
    # uses new macros to run timer on a specific block of code
    -- TEST 'setting a var' ::: var('variable', ?common?)
    -- TEST 'setting a var w macro' ::: @variable=|?common?|
    -- TEST 'single var replacement' ::: ?common?
    -- TEST 'large math expression' ::: 45727356345634653947852/4358237456234562345920843509/549837245.529345234584752*4329780866246534659234209 - 23957983475298347592.543258729348753

# -------------------------------------------


# ----------------- PYTHON FALLBACK -----------------

# tests msn1 variable setting runtime 
~ test_fallback()->_
    -- TEST 'python fallback' ::: <<>>
    -- TEST 'python fallback w var' ::: << |?common?| >>

# -------------------------------------------

# ----------------- FUNCTIONS -----------------

# tests a basic system call
~ test_syscall () -> _
    -- TEST 'single syscall' ::: assert(1)
    -- TEST 'nested syscall' ::: assert(assert(1))
    -- TEST '=>()' ::: =>()
    -- TEST '=>(=>(), =>())' ::: =>(=>(), =>())
    -- TEST '1 empty for loop run' ::: for(0, 2, 'i',)
    -- TEST '100 for loop runs' ::: for(0,100,'i',)
    -- TEST '1 simple for loop run' ::: 0|2|i()
    -- TEST '100 simple for loop run' ::: 0|100|i()
    -- TEST 'if' ::: if(1,)
    -- TEST 'if else' ::: if(0,,)
    -- TEST 'simple if' ::: ?1()
    -- TEST 'simple if else' ::: ?0(,)
    -- TEST 'msn2 eval -()' ::: -(?common?)

~ __ () -> _
    --

# tests empty 
~ test_user_method()->_
    -- TEST 'empty user method' ::: __()
# -------------------------------------------

# ----------------- ALGORITHMS -----------------
~ test_sort()->_
    -- RESET
    -- TEST 'sorting array of len 10' ::: test_sort_arr.sort()
    -- RESET
    -- TEST '^^ with python fallback' ::: << sorted(|?test_sort_arr?|) >>
# -------------------------------------------



# ----------------- CREATING MACROS / SYNTAX / POSTMACROS -----------------
~ test_macros()->_
    -- TEST 'creating an empty macro' ::: macro(';', '__unused',)
    -- TEST 'invoking an empty macro' ::: ;
# -------------------------------------------


# ----------------------------- RUNNING TESTS -----------------------------

# prints a divider
DIVIDER

# executes a test in a private context
private(test_nothing())

DIVIDER
private(test_vars())
DIVIDER
private(test_fallback())
DIVIDER
private(test_syscall())
DIVIDER
private(test_sort())
DIVIDER
private(test_user_method())
DIVIDER
private(test_macros())