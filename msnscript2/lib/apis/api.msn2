# standard api endpoint structure
# author : Mason Marker
# date : 11/17/2022
# updated in 2.0.387

# import http library
import ('lib/http.msn2')

# api structure
# contains host, port, path, and initial json data
class('api', (
    var('host', None),
    var('port', None),
    var('path', None),
    var('init_data', None)
))

# network api
var('api:api_network', api(network, 5000, '/', {}))

# local api
var('api:api_local', api(localhost, 5000, '/', {}))

# gets from an api endpoint
def('api_get', 'api_get:__api__', (
    GET(api_get:__api__.host(), api_get:__api__.port(), api_get:__api__.path())
))

# posts data to an api endpoint
# essentially calls update() on the current json with the new data being sent
def('api_post', 'api_post:__api__', 'data', (
    POST(api_post:__api__.host(), api_post:__api__.port(), api_post:__api__.path(), data)
))

# deletes from an api endpoint
# ~ api_delete(__api__) -> response
def('api_delete', 'api_delete:__api__', (
    DELETE(api_delete:__api__.host(), api_delete:__api__.port(), api_delete:__api__.path())
))

# constructs the url that the api endpoint passed resides
# ~ api_url(__api__) -> path
def('api_url', 'api_url:__api__', (
    cat('http://', api_url:__api__.host(), ':', api_url:__api__.port(), api_url:__api__.path())
))

# gets the name of the thread hosting the api endpoint passed
def('api_thread_name', 'api_thread_name:__api__', api_url(api_thread_name:__api__))

# starts an api endpoint on a new thread
# DEPRECATED
def('api_start', 'api_start:__api__', (
    thread(api_url(api_start:__api__), (
        ENDPOINT(api_start:__api__.host(), 
                api_start:__api__.port(), 
                api_start:__api__.path(), 
                api_start:__api__.init_data())
    )),
    True
))

# API with CORS
class('cors_api', (

    # vars
    @ host = '127.0.0.1',
    @ port = 8080,
    @ path = '/',
    @ init_data = {},

    # methods
    # starts the api
    def('start', 'self', 
        ENDPOINT(self.host(), self.port(), self.path(), self.init_data())),

    # creates the path for the api
    def('url', 'self', cat('http://', self.host(), ':', self.port(), self.path())),

    # gets from the API
    def('GET', 'self', GET(self.host(), self.port(), self.path())),

    # posts to the API
    def('POST', 'self', 'POST:_data_', 
        POST(self.host(), self.port(), self.path(), POST:_data_)),

    # posts a single entry to the API
    def('POSTENTRY', 'self', 'POSTENTRY:__key', 'POSTENTRY:__value', 
        POST(self.host(), self.port(), self.path(), 
            dictfrom(POSTENTRY:__key, POSTENTRY:__value))),

    # deletes from the API
    def('DELETE', 'self', DELETE(self.host(), self.port(), self.path())),

    # waits for a field to be a certain value
    def('wait_for_field', 'self', 'wait_for_field:__field', 'wait_for_field:__eq', 'wait_for_field:__interval',
        wait(try((
            equals(get(self.GET(), wait_for_field:__field), 
                wait_for_field:__eq)
        )),, wait_for_field:__interval)),

    # switches a field on or off
    def('switch', 'self', 'switch:__field', 
        self.POST(dictfrom(switch:__field, not(get(self.GET(), switch:__field)))))
))

