# React helper functions for JS generation.
#
# author : Mason Marker
# date : 12/16/2023

# imports
import ('lib/os')
import ('lib/console')
import ('lib/python')

# global variable to remember writing or not
@ react:update_has_written = False

# page.js layout
class('react:page', (
    # page information
    @ url = None,
    @ title = 'page',
    # components in this page
    @ components = {},
))

# long string
@ react:long_string = "-" * 30

# prints the long string
def('react:print_long_string', (
    console:print(arr(
        object('text', '[', 'style', 'bold', 'fore', 'white'),
        object('text', 'MSN2', 'style', 'bold', 'fore', 'black'),
        object('text', '] ', 'style', 'bold', 'fore', 'white'),
        object('text', react:long_string, 'style', 'bold', 'fore', 'black'),
    ))
))

# renders a component
def('react:prerender_check', 'react:prerender_check:page_url', (
    # determine if the update has been written or not
    if (not(react:update_has_written), (
        # clear file
        file.clear(react:prerender_check:page_url),
        # write header comments
        file.append(react:prerender_check:page_url, cat(
            "/**\n",
            " * App component.\n",
            " *\n",
            " * Don't edit comments ending with '::',\n",
            " * they're used by MSN2 to update this file.\n",
            " *\n",
            " * (generated by MSN2) at\n",
            +(" * ", react:prerender_check:page_url, "\n"),
            " *\n",
            " * @author {your name}\n",
            " * @date {current date}\n",
            " */\n\n",
            "// imports ::\n\n",
            "// default component export ::\n"
        ))
    ))
))


# adds a new component to the page sent
def('react:render', 'react:render:page_url', 'react:render:component_script', (
    # run prerender check
    react:prerender_check(react:render:page_url),
    # render component
    # switch to JavaScript translation
    JS:,
        file.append(react:render:page_url, -(react:render:component_script)),
    :JS
))

# cleans the NextJS project of all relevant / generated files
def('react:clean', (
    os:clear(),
    # print cleaning...
    console:print(arr(
        object('text', '[', 'style', 'bold', 'fore', 'white'),
        object('text', 'MSN2', 'style', 'bold', 'fore', 'black'),
        object('text', '] ', 'style', 'bold', 'fore', 'white'),
        object('text', 'cleaning project...', 'style', 'bold', 'fore', 'yellow')
    )),
    # get next project path
    @ react:clean:project_path = next_project_path(),
    # empty pages directory
    file.emptydir(+(react:clean:project_path, '/pages')),
    # empty api folder
    file.emptydir(+(react:clean:project_path, '/api')),
    # delete /pages/api
    file.rmdir(+(react:clean:project_path, '/api')),
    # empty /styles
    file.emptydir(+(react:clean:project_path, '/styles')),
    # delete /styles
    file.rmdir(+(react:clean:project_path, '/styles'))
))


# py script to prettify js script
\\
import jsbeautifier
formatted_code = jsbeautifier.beautify('{=react:prettify_py_script:arg1=}', {
    "indent_size": 2,
    "indent_char": " ",
    "indent_with_tabs": False,
    "e4x": True,
    "max_preserve_newlines": 2,
    "preserve_newlines": True,
    "jslint_happy": True
})
react:prettify_py_script \\

# renders the default export at a route
def('react:page', 'react:default:page_url', 'react:default:component_script', &react:default:ui_library="none", (
    if (not(next_entry_path()), (
        # set entry path if not already set
        next_entry_path(react:default:page_url),
        # clean this project
        react:clean(),
        # clear terminal
        os:clear(),
        print:box(+(' MSN2 NextJS Generator ', version(), ' ')),
        # intro
        console:print(arr(
            object('text', '[', 'style', 'bold', 'fore', 'white'),
            object('text', 'MSN2', 'style', 'bold', 'fore', 'black'),
            object('text', '] ', 'style', 'bold', 'fore', 'white'),
            object('text', 'starting generation', 'style', 'bold', 'fore', 'yellow')
        )),
        console:print(arr(
            object('text', '[', 'style', 'bold', 'fore', 'white'),
            object('text', 'MSN2', 'style', 'bold', 'fore', 'black'),
            object('text', '] ', 'style', 'bold', 'fore', 'white'),
            object('text', 'NextJS project path: ', 'style', 'bold', 'fore', 'yellow'),
            object('text', @react:prerender_check:project_path = +(next_project_path(), '/'), 
                'style', 'bold', 'fore', 'green')
        )),
        # print long string
        react:print_long_string()
    )),
    if (react:update_has_written, (
        # modify given path to be relative to entry path
        @react:default:page_url = +(next_project_path(), '/pages/', react:default:page_url),

        # ---------------------------------------
        # CREATING NEXTJS PAGE UNDER pages/
        #
        # if file does not exist at the path, create the folders to
        # and the file itself
        # ---------------------------------------
        if (not(file.exists(react:default:page_url)), (
            # split by / and remove the last element
            @react:default:page_url_split = react:default:page_url.split('/'),
            # remove the last element
            react:default:file_name = react:default:page_url_split.pop(),
            # for each folder in the path
            for(0, -(len(react:default:page_url_split), 1), 'react:default:i', (
                @react:default:curr = react:default:page_url_split.get(react:default:i),
                # get the previous path from this path
                @react:default:curr_page_url = cat(iterable:join('/', slice(react:default:page_url_split, 0, react:default:i)), '/', react:default:curr),
                # if the path does not exist, create it
                if (not(file.exists(react:default:curr_page_url)), (
                    # create the folder
                    file.mkdir(react:default:curr_page_url)
                ))
            )),
            # create the file
            file.create(react:default:page_url)
        ))
    )),
    # ---------------------------------------
    # CREATING app.css UNDER styles/
    #
    # if file does not exist at the path, create the folders to
    # and the file itself
    # ---------------------------------------
    @react:default:styles_path = +(next_project_path(), '/styles/'),
    if (not(file.exists(react:default:styles_path)), (
        # create the directory
        file.mkdir(react:default:styles_path),
        # create the file
        file.write(+(react:default:styles_path, 'app.css'), "
        @import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');
        html, body {margin: 0; padding: 0;}
        ")
    )),
    # ---------------------------------------
    # CREATING _app.js UNDER pages/
    #
    # if file does not exist at the path, create the folders to
    # and the file itself
    # ---------------------------------------
    @react:default:app_path = +(next_project_path(), '/pages/_app.js'),
    if (not(file.exists(react:default:app_path)), (
        # whether or not we're using Chakra right now
        @react:default:using_chakra = react:default:ui_library.equals("chakra"),
        # create the file
        file.write(react:default:app_path, cat(
            cat("// Generated at ", now(), "\n"),

            "// appwide styles\n",
            "import '../styles/app.css'\n\n",
            "// imports ::\n\n",

            # # if using Chakra
            # if (react:default:using_chakra,  "import { ChakraProvider } from '@chakra-ui/react'\n", ""),

            "// main app component\n",
            "function MyApp({ Component, pageProps }) {\n",
                "return (\n// return ::\n\n<Component {...pageProps} />\n",
                "{/** endreturn */}\n\n)",
            "}\n\n",
            "export default MyApp\n"
        ))
    )),
    
    # run prerender check
    react:prerender_check(react:default:page_url),
    console:print(arr(
        object('text', '[', 'style', 'bold', 'fore', 'white'),
        object('text', 'MSN2', 'style', 'bold', 'fore', 'black'),
        object('text', '] ', 'style', 'bold', 'fore', 'white'),
        object('text', 'updating: ', 'style', 'bold', 'fore', 'blue'),
        object('text', (
            @ react:prerender_check:_r = react:prerender_check:page_url,
            @ react:prerender_check:_r = react:prerender_check:_r.replace(react:prerender_check:project_path, ''),
            react:prerender_check:_r
        ), 'style', 'bold', 'fore', 'green')
    )),
    # render component
    # switch to JavaScript translation
    react:render(react:default:page_url, script(
        # export default function at the path
        exdefault(
            def('Index', 'props', 
                {=react:default:component_script=})
        )
    )),
    # prettify the code at this path
    JS:,
        prettify(react:default:page_url),
    :JS,
    @ react:update_has_written = True,
    # finished updating page URL
    # do the above but more compact
    console:print(arr(
        object('text', '[', 'style', 'bold', 'fore', 'white'),
        object('text', 'MSN2', 'style', 'bold', 'fore', 'black'),
        object('text', '] ', 'style', 'bold', 'fore', 'white'),
        object('text', 'finished updating: ', 'style', 'bold', 'fore', 'blue'),
        object('text', react:prerender_check:_r, 'style', 'bold', 'fore', 'green'),
    )),
    # print long string
    react:print_long_string()
))

# renders an api route
def('react:api:route', 
    'react:route_name',
    'react:req_var_name', 
    'react:res_var_name',
    # what will the api function return?
    'react:api_function',
    # return an api route
    api:route(react:route_name,
        # api function options
        react:req_var_name, react:res_var_name, -(react:api_function),
        # handler for fetchin in client side code
        'react:body', async(
            api:get(react:route_name)
        )
    )
)