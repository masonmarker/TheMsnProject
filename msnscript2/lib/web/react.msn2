# React helper functions for JS generation.
#
# author : Mason Marker
# date : 12/16/2023

# imports
import ('lib/os')
import ('lib/console')
import ('lib/python')

# global variable to remember writing or not
@ react:update_has_written = False

# page.js layout
class('react:page', (
    # page information
    @ url = None,
    @ title = 'page',
    # components in this page
    @ components = {},
))


# React Node class
class('react:reactnode', (
    @ style = {},
    @ children = [],
    @ type = 'div',
    @ props = {},
    @ key = None,
    @ ref = None,
))

# long string
@ react:long_string = "-" * 30

# prints the long string
def('react:print_long_string', (
    console:print(arr(
        object('text', '[', 'style', 'bold', 'fore', 'white'),
        object('text', 'MSN2', 'style', 'bold', 'fore', 'black'),
        object('text', '] ', 'style', 'bold', 'fore', 'white'),
        object('text', react:long_string, 'style', 'bold', 'fore', 'black'),
    ))
))

# renders a component
def('react:prerender_check', 'react:prerender_check:page_url', (
    # determine if the update has been written or not
    if (not(react:update_has_written), (
        # clear terminal
        os:clear(),
        print:box(+(' MSN2 NextJS Generator ', version(), ' ')),
        # intro
        console:print(arr(
            object('text', '[', 'style', 'bold', 'fore', 'white'),
            object('text', 'MSN2', 'style', 'bold', 'fore', 'black'),
            object('text', '] ', 'style', 'bold', 'fore', 'white'),
            object('text', 'starting generation', 'style', 'bold', 'fore', 'yellow'),
        )),
        # print long string
        react:print_long_string(),
        # do the above but more compact
        console:print(arr(
            object('text', '[', 'style', 'bold', 'fore', 'white'),
            object('text', 'MSN2', 'style', 'bold', 'fore', 'black'),
            object('text', '] ', 'style', 'bold', 'fore', 'white'),
            object('text', 'updating: ', 'style', 'bold', 'fore', 'blue'),
            object('text', react:prerender_check:page_url, 'style', 'bold', 'fore', 'green'),
        )),
        # clear file
        file.clear(react:prerender_check:page_url),
        # write header comments
        file.append(react:prerender_check:page_url, cat(
            "/**\n",
            " * App component.\n",
            " *\n",
            " * Don't edit comments ending with '::',\n",
            " * they're used by MSN2 to update this file.\n",
            " *\n",
            " * (generated by MSN2) at\n",
            +(" * ", react:prerender_check:page_url, "\n"),
            " *\n",
            " * @author {your name}\n",
            " * @date {current date}\n",
            " */\n\n",
            "// imports ::\n\n",
            "// default component export ::\n"
        ))
    ))
))


# adds a new component to the page sent
def('react:render', 'react:render:page_url', 'react:render:component_script', (
    # run prerender check
    react:prerender_check(react:render:page_url),
    # render component
    # switch to JavaScript translation
    JS:,
        file.append(react:render:page_url, -(react:render:component_script)),
    :JS
))

# cleans the NextJS project of all relevant / generated files
def('react:clean', (
    # empty pages directory
    file.emptydir(+(next_project_path(), '/pages')),
    # empty api folder
    file.emptydir(+(next_project_path(), '/api'))
))


# py script to prettify js script
\\
import jsbeautifier
thing = "awefawef"
formatted_code = jsbeautifier.beautify('{=react:prettify_py_script:arg1=}', {
    "indent_size": 2,
    "indent_char": " ",
    "indent_with_tabs": False,
    "e4x": True,
    "max_preserve_newlines": 2,
    "preserve_newlines": True,
    "jslint_happy": True
})
react:prettify_py_script \\

# renders the default export at a route
def('react:page', 'react:default:page_url', 'react:default:component_script', (
    if (not(next_entry_path()), (
        # set entry path if not already set
        next_entry_path(react:default:page_url),
        # clean this project
        react:clean()
    )),
    if (react:update_has_written,
         @react:default:page_url = +(next_project_path(), '/pages/', react:default:page_url)),
    # run prerender check
    react:prerender_check(react:default:page_url),
    # render component
    # switch to JavaScript translation
    react:render(react:default:page_url, script(
        # export default function at the path
        exdefault(
            def('Index', 'props', 
                {=react:default:component_script=})
        )
    )),
    # prettify the code at this path
    JS:,
        prettify(react:default:page_url),
    :JS,
    @ react:update_has_written = True,
    # finished updating page URL
    # do the above but more compact
    console:print(arr(
        object('text', '[', 'style', 'bold', 'fore', 'white'),
        object('text', 'MSN2', 'style', 'bold', 'fore', 'black'),
        object('text', '] ', 'style', 'bold', 'fore', 'white'),
        object('text', 'finished updating: ', 'style', 'bold', 'fore', 'blue'),
        object('text', react:prerender_check:page_url, 'style', 'bold', 'fore', 'green'),
    )),
    # print long string
    react:print_long_string(),
    # print 'next steps: '  in blue
    console:print(arr(
        object('text', '[', 'style', 'bold', 'fore', 'white'),
        object('text', 'MSN2', 'style', 'bold', 'fore', 'black'),
        object('text', '] ', 'style', 'bold', 'fore', 'white'),
        object('text', 'DEV TODO: ', 'style', 'bold', 'fore', 'blue'),
    )),
    # ask user to check if page.js compiled successfully
    console:print(arr(
        object('text', '[', 'style', 'bold', 'fore', 'white'),
        object('text', 'MSN2', 'style', 'bold', 'fore', 'black'),
        object('text', '] ', 'style', 'bold', 'fore', 'white'),
        object('text', ' - ', 'style', 'bold', 'fore', 'blue'),
        object('text', 'verify a successful compilation in updated files', 'style', 'bold', 'fore', 'yellow'),
    )),
    # add another todo that says refresh localhost if changes have not been made
    console:print(arr(
        object('text', '[', 'style', 'bold', 'fore', 'white'),
        object('text', 'MSN2', 'style', 'bold', 'fore', 'black'),
        object('text', '] ', 'style', 'bold', 'fore', 'white'),
        object('text', ' - ', 'style', 'bold', 'fore', 'blue'),
        object('text', 'refresh localhost if changes have not been made', 'style', 'bold', 'fore', 'yellow'),
    )),
    # print long string
    react:print_long_string(),
    # print DONE in green
    print(),
    console:print(arr(
        object('text', '[', 'style', 'bold', 'fore', 'white'),
        object('text', 'MSN2', 'style', 'bold', 'fore', 'green'),
        object('text', '] ', 'style', 'bold', 'fore', 'white'),
        object('text', +(' ' * 5, 'GENERATION SUCCESSFUL'), 'style', 'bold', 'fore', 'green'),
    )),
    print()
))

# renders an api route
def('react:api:route', 
    'react:route_name',
    'react:req_var_name', 
    'react:res_var_name',
    # what will the api function return?
    'react:api_function',
    # return an api route
    api:route(react:route_name,
        # api function options
        react:req_var_name, react:res_var_name, -(react:api_function),
        # handler for fetchin in client side code
        'react:body', async(
            api:get(react:route_name)
        )
    )
)