:: array utilities for MSNScript2
:: author : Mason Marker


:: generates a range from __start to __end
~ a_range(__start, __end) -> __range
>  var.set(<__range>, [])
>  for (*__start, *__end, <i>, ^var.add(<__range>, *i))


:: reversed the given array
~ a_reverse(__array) -> __reversed
>  var.set(<__reversed>, [])
>  var.set(<__length>, var.length(<__array>))
>  for (*__length, 0, <i>, ^var.add(<__reversed>, var.get(<__array>, *i)))

:: obtains a slice of an array
~ a_slice(__array, __start, __end) -> __slice
>  var.set(<__slice>, [])
>  for (*__start, *__end, <i>, ^var.add(<__slice>, var.get(<__array>, *i)))

:: computes the sum of an array
~ a_sum(__array)->__sum
>  var.set(<__sum>, 0)
>  for (0, len(*__array), <i>, ^var.add(<__sum>, var.get(<__array>, *i)))

:: computes the average of an array
~ a_avg(__array)->__avg
>  var.set(<__sum>, a_sum(*__array))
>  var.set(<__length>, var.length(<__array>))
>  var.set(<__avg>, *__sum / __length)

:: computes the median of an array
~ a_median(__array)->__median
>  var.set(<__length>, var.length(<__array>))
>  var.set(<__sorted>, var.sort(<__array>))

$$
>  var.set(<__median>, 

    :: verify length is not 0
    check(*__length != 0,
        ^if (* __length % 2 == 0,

            :: if length is even
            :: when using the inline '_' function, code must be written BACKWARDS for evaluation
            :: the first argument is returned

            _(
                *__sum//2,
                var.set(<__sum>, *__left + __right),
                var.set(<__left>, var.get(<__sorted>, *__length //2 - 1)),
                var.set(<__right>, var.get(<__sorted>, *__length//2))
            ),
        :: else if length is odd
            var.get(<__sorted>, *__length // 2)
        ), 0
    )
)
$$

 