# offers more file operations



# helper for copydir()
function('_dirrecurse', =>(
        # if file is directory, create directory in new location
    if (file.isdir(old), =>(

        # make new directory
        file.mkdir(newpath),

        # copy files from old directory to new directory
        @ thisdir_files = file.listdir(old),

        # create old path
        thisdir_files.each('fl2', =>(

            # obtain working file path
            @ old2 = cat(old, '/', fl2),
            @ newpath2 = cat(newpath, '/', fl2),

            # if file is directory, recurse, otherwise copy .msn2 library file
            if (file.isdir(old2), 
                private(_dirrecurse(old2, newpath2)), 

                # else
                file.copy(old2, newpath2))
        ))       

    # otherwise, copy file to new location  
    ), file.copy(old, newpath))

), 'old', 'newpath')



# # copy the msn2 library to the new directory
# @ files = file.listdir('lib')

# # copy each file from every 
# files.each('fl', =>(

#     # obtain working file path
#     @ old = cat('lib/', fl),
#     @ newpath = cat('portable/msn2/', fl),

#     # adds adds all files from the lib folder
#     private(recurse(old, newpath)),
# ))

# copies a directory tree to a new location
function('copydir', =>(

    @ files = file.listdir(src),

    files.each('fl', =>(

        # obtain working file path
        @ old = cat(src, '/', fl),
        @ newpath = cat(dest, '/', fl),

            # adds adds all files from the lib folder
        private(_dirrecurse(old, newpath))
    ))

), 'src', 'dest')


# file class, for simplified file operations.
# 7/26/2023
class('msn2file', (
    # initial path to the file
    @ path = '',
    
    # no constructor needed

    # writes to the file
    function('write', 
        file.write(self.path(), f:write:data), 
    'self', 'f:write:data')
))