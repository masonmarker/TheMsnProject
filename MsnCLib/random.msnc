:: offers additional random capabilities;
:: author : Mason Marker;
:: date   : 03/12/2022;

import math;

d dreturn = 0;
i ireturn = 0;
i iparam1 = 0;
i iparam2 = 0; 

s r_random_def = obtains a random double within bounds;
s r_random_params = @iparam1 @iparam2 -> @dreturn;
f random r_random_def r_random_params;
random = d r_random_ph = -1;
random = r_random_ph = ?;
random = d r_random_minus = iparam2 - iparam1;
random = dreturn = r_random_ph * r_random_minus;
random = dreturn += iparam1;
end random;

s r_randomint_def = obtains a random integer within bounds;
s r_randomint_params = @iparam1 @iparam2 -> @ireturn;
f randomint r_randomint_def r_randomint_params;
randomint = random;
randomint = iparam1 = iparam1;
randomint = iparam2 = iparam2;
randomint = ireturn = dreturn;
end randomint;

s r_randomlist_def = generates a list of random numbers of a certain length;
s r_randomlist_params = @iparam1 -> @lreturn;
f randomlist r_randomlist_def r_randomlist_params;
randomlist = l lreturn;
randomlist = f r_randomlist_block;
randomlist = r_randomlist_block = randomint with 0 100;
randomlist = r_randomlist_block = lreturn add ireturn;
randomlist = end r_randomlist_block;
randomlist = r_randomlist_block [0:iparam1];
end randomlist;
